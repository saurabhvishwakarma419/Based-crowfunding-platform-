// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * @title Project
 * @dev Implements a decentralized crowdfunding platform
 */
contract Project {
    // Project structure
    struct Campaign {
        address payable creator;
        string title;
        string description;
        uint256 targetAmount;
        uint256 raisedAmount;
        uint256 deadline;
        bool completed;
        bool funded;
        mapping(address => uint256) contributions;
        uint256 contributorsCount;
    }

    // State variables
    uint256 public campaignCount;
    mapping(uint256 => Campaign) public campaigns;
    
    // Events
    event CampaignCreated(uint256 indexed campaignId, address indexed creator, string title, uint256 targetAmount, uint256 deadline);
    event ContributionReceived(uint256 indexed campaignId, address indexed contributor, uint256 amount);
    event FundsWithdrawn(uint256 indexed campaignId, address indexed creator, uint256 amount);
    event RefundClaimed(uint256 indexed campaignId, address indexed contributor, uint256 amount);

    /**
     * @dev Creates a new crowdfunding campaign
     * @param _title Title of the campaign
     * @param _description Description of the campaign
     * @param _targetAmount Target amount to be raised in wei
     * @param _durationInDays Duration of the campaign in days
     */
    function createCampaign(
        string memory _title,
        string memory _description,
        uint256 _targetAmount,
        uint256 _durationInDays
    ) external {
        require(_targetAmount > 0, "Target amount must be greater than zero");
        require(_durationInDays > 0, "Duration must be greater than zero");
        
        campaignCount++;
        Campaign storage newCampaign = campaigns[campaignCount];
        
        newCampaign.creator = payable(msg.sender);
        newCampaign.title = _title;
        newCampaign.description = _description;
        newCampaign.targetAmount = _targetAmount;
        newCampaign.deadline = block.timestamp + (_durationInDays * 1 days);
        newCampaign.completed = false;
        newCampaign.funded = false;
        newCampaign.contributorsCount = 0;
        
        emit CampaignCreated(campaignCount, msg.sender, _title, _targetAmount, newCampaign.deadline);
    }

    /**
     * @dev Allows users to contribute to a campaign
     * @param _campaignId ID of the campaign to contribute to
     */
    function contribute(uint256 _campaignId) external payable {
        Campaign storage campaign = campaigns[_campaignId];
        
        require(_campaignId > 0 && _campaignId <= campaignCount, "Invalid campaign ID");
        require(block.timestamp < campaign.deadline, "Campaign has ended");
        require(!campaign.completed, "Campaign is already completed");
        require(msg.value > 0, "Contribution amount must be greater than zero");
        
        // Check if this is the first contribution from this address
        if (campaign.contributions[msg.sender] == 0) {
            campaign.contributorsCount++;
        }
        
        campaign.contributions[msg.sender] += msg.value;
        campaign.raisedAmount += msg.value;
        
        // Check if target has been reached
        if (campaign.raisedAmount >= campaign.targetAmount) {
            campaign.funded = true;
        }
        
        emit ContributionReceived(_campaignId, msg.sender, msg.value);
    }

    /**
     * @dev Allows campaign creator to withdraw funds if campaign is successful
     * @param _campaignId ID of the campaign to withdraw funds from
     */
    function withdrawFunds(uint256 _campaignId) external {
        Campaign storage campaign = campaigns[_campaignId];
        
        require(_campaignId > 0 && _campaignId <= campaignCount, "Invalid campaign ID");
        require(msg.sender == campaign.creator, "Only campaign creator can withdraw funds");
        require(block.timestamp >= campaign.deadline || campaign.raisedAmount >= campaign.targetAmount, 
                "Campaign must be ended or target reached");
        require(campaign.raisedAmount >= campaign.targetAmount, "Target amount not reached");
        require(!campaign.completed, "Funds already withdrawn");
        
        campaign.completed = true;
        uint256 amount = campaign.raisedAmount;
        campaign.creator.transfer(amount);
        
        emit FundsWithdrawn(_campaignId, campaign.creator, amount);
    }
    
    /**
     * @dev Allows contributors to claim refund if campaign fails
     * @param _campaignId ID of the campaign to claim refund from
     */
    function claimRefund(uint256 _campaignId) external {
        Campaign storage campaign = campaigns[_campaignId];
        
        require(_campaignId > 0 && _campaignId <= campaignCount, "Invalid campaign ID");
        require(block.timestamp >= campaign.deadline, "Campaign has not ended yet");
        require(campaign.raisedAmount < campaign.targetAmount, "Campaign was successful, no refunds");
        require(!campaign.completed, "Refunds already processed");
        require(campaign.contributions[msg.sender] > 0, "No contribution found");
        
        uint256 amount = campaign.contributions[msg.sender];
        campaign.contributions[msg.sender] = 0;
        
        payable(msg.sender).transfer(amount);
        
        emit RefundClaimed(_campaignId, msg.sender, amount);
    }
}
